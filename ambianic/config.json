{
  "name": "Ambianic Edge",
  "version": "0.0.1",
  "slug": "ambianic",
  "description": "Ambiance edge",
  "url": "https://github.com/dcmartin/hassio-addons/ambianic/README.md",
  "startup": "application",
  "boot": "auto",
  "arch": [
    "aarch64",
    "amd64",
    "armv7"
  ],
  "ingress": false,
  "ingress_port": null,
  "devices": [],
  "hassio_api": false,
  "hassio_role": "default",
  "host_network": true,
  "homeassistant_api": false,
  "privileged": [
    "SYS_ADMIN"
  ],
  "timeout": 90,
  "tmpfs": "size=128m,uid=0,rw",
  "map": [
    "share:rw",
    "config:rw"
  ],
  "panel_icon": "mdi:cctv",
  "panel_title": "Ambianic Edge",
  "panel_admin": true,
  "ports": {
    "8778/tcp": 8778
  },
  "ports_description": {
    "8778/tcp": "API"
  },
  "options": {
    "log_level": "info",
    "workspace": "/data/ambianic",
    "ai_models": [
      {
        "name": "entity_detection",
        "type": "video",
        "top_k": 10,
        "labels": "/opt/ambianic-edge/ai_models/coco_labels.txt",
        "tflite": "/opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess.tflite",
        "edgetpu": "/opt/ambianic-edge/ai_models/mobilenet_ssd_v2_coco_quant_postprocess_edgetpu.tflite"
      },
      {
        "name": "face_detection",
        "type": "video",
        "top_k": 2,
        "labels": "/opt/ambianic-edge/ai_models/coco_labels.txt",
        "tflite": "/opt/ambianic-edge/ai_models/mobilenet_ssd_v2_face_quant_postprocess.tflite",
        "edgetpu": "/opt/ambianic-edge/ai_models/mobilenet_ssd_v2_face_quant_postprocess_edgetpu.tflite"
      }
    ],
    "pipelines": [
      {
        "name": "camera1_entity_face",
        "source": "camera1",
        "steps": [
          { "detect": { "ai_model": "entity_detection", "confidence": 0.6 },
            "save": { "interval": 2, "idle": 6000 }
          },
          {
            "detect": { "ai_model": "face_detection", "confidence": 0.6 },
            "save": { "interval": 2, "idle": 600 }
          }
        ]
      },
      {
        "name": "camera2_entity_face",
        "source": "camera2",
        "steps": [
          {
            "detect": { "ai_model": "entity_detection", "confidence": 0.6 },
            "save": { "interval": 2, "idle": 6000 }
          },
          {
            "detect": { "ai_model": "face_detection", "confidence": 0.6 },
            "save": { "interval": 2, "idle": 600 }
          }
        ]
      }
    ],
    "sources": [
      {
        "name": "camera1",
        "uri": "rtsp://username:password@192.168.1.221/live",
        "type": "video",
        "live": true
      },
      {
        "name": "camera2",
        "uri": "rtsp://username:password@192.168.1.222/live",
        "type": "video",
        "live": true
      }
    ]
  },
  "schema": {
    "log_level": "str",
    "workspace": "str",
    "log_type": "str?",
    "group": "str?",
    "device": "str?",
    "username": "str?",
    "password": "str?",
    "timezone": "str?",
    "ai_models": [
      {
        "name": "str",
        "type": "list(video|audio)",
        "top_k": "int(1,100)?",
        "labels": "str",
        "tflite": "str?",
        "edgetpu": "str?"
      }
    ],
    "pipelines": [
      {
        "name": "str",
        "type": "list(video|audio)",
        "source": "str",
        "steps": [
          {
            "detect": {
              "ai_model": "str",
              "confidence": "float(0.0,1.0)"
            },
            "save": {
              "name": "str?",
              "interval": "int(0,360)?",
              "idle": "int(0,86400)?"
            }
          }
        ]
      }
    ],
    "sources": [
      {
        "name": "str",
        "type": "list(video|audio)",
        "uri": "str?",
        "live": "bool?",
        "framerate": "int(2,30)?",
        "duration": "int(1,60)?",
        "output": "list(off|mp4)?",
        "quality": "int(1,100)?",
        "rotate": "int?",
        "height": "int?",
        "width": "int?"
      }
    ],
    "mqtt": {
      "host": "str?",
      "port": "port?",
      "username": "str?",
      "password": "str?"
    }
  },
  "environment": {
    "LOG_FORMAT": "{LEVEL}: {MESSAGE}"
  }
}
